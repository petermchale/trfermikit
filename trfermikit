#!/usr/bin/env bash

# export CYAN='\033[0;36m'
# export RED='\033[0;31m'
# export NO_COLOR='\033[0m'

# https://stackoverflow.com/a/246128/6674256
root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

read_config () { 
  local key1_=$1 
  local key2_=$2
  ${root}/utilities/read_config.sh ${root} ${root} ${key1_} ${key2_}
}

functional_regions=$(read_config makeRegions functionalRegions)
min_repeat_length=$(read_config makeRegions minRepeatLength)
genome_build=$(read_config makeRegions genomeBuild)

# https://devhints.io/bash#miscellaneous
# put option-fetching before "set -o nounset" so that we can detect flags without arguments
while [[ "$1" =~ ^- ]]; do 
  case $1 in
    --output ) shift; [[ ! $1 =~ ^- ]] && output=$1;;
    --reference ) shift; [[ ! $1 =~ ^- ]] && reference=$1;;
    --threads ) shift; [[ ! $1 =~ ^- ]] && number_threads=$1;;
    --alignments ) shift; [[ ! $1 =~ ^- ]] && alignments=$1;;
    --functional-regions ) shift; [[ ! $1 =~ ^- ]] && functional_regions=$1;;
    --min-repeat-length ) shift; [[ ! $1 =~ ^- ]] && min_repeat_length=$1;;
    --hg19 ) genome_build="hg19";;
    *) bash ${root}/utilities/error.sh "$0: $1 is an invalid flag"; exit 1;;
  esac 
  shift
done

set -o errexit
set -o pipefail
# set -o noclobber

set -o xtrace
# Must use single quote to prevent variable expansion.
# For example, if double quotes were used, ${LINENO} would take on the value of the current line,
# instead of its value when PS4 is used later in the script
# https://stackoverflow.com/a/6697845/6674256
# ${FOO:+val}    val if $FOO is set
# ${FOO[0]}   element #0 of the FOO array
# https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html
PS4='+ (${BASH_SOURCE[0]##*/} @ ${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

mkdir --parents ${output} 
if [[ ! -f ${output}/config.json ]]; then 
  cp ${root}/config.json ${output}/config.json
fi 

update_config () { 
  local key1_=$1 
  local key2_=$2 
  local value_=$3 
  ${root}/utilities/update_config.sh ${root} ${output} ${key1_} ${key2_} ${value_}
}

update_config general reference ${reference}
update_config general numberThreads ${number_threads}
update_config general alignments ${alignments}

update_config makeRegions functionalRegions ${functional_regions}
update_config makeRegions minRepeatLength ${min_repeat_length}
update_config makeRegions genomeBuild ${genome_build}

set -o nounset

if [[ ! -f ${alignments}.cram.crai ]]; then 
  bash ${root}/utilities/error.sh "Please index: ${alignments}.cram"
  exit 1
fi 

bash ${root}/utilities/prepare_reference.sh \
  --reference ${reference} \
  --root ${root}

# https://stackoverflow.com/a/43476575/6674256
export PYTHONPATH="${root}/utilities"

rm --force ${output}/fermikit.*

BASH_ENV=${root}/utilities/debug.sh \
  bash ${root}/make-regions/make-regions.sh \
      --output ${output} \
      --root ${root} \
    2> ${output}/make-regions.log 

BASH_ENV=${root}/utilities/debug.sh \
  bash ${root}/make-calls/make-calls.sh \
      --output ${output} \
      --root ${root} \
    > ${output}/make-calls.log 2>&1

filter_calls () { 
  local svtype=$1

  BASH_ENV=${root}/utilities/debug.sh \
    bash ${root}/filter-calls/filter-calls.sh \
        --output ${output} \
        --svtype ${svtype} \
        --root ${root} \
    2> ${output}/filter-calls-${svtype}.log 
}

filter_calls "DEL"
filter_calls "INS"


