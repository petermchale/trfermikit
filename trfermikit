#!/usr/bin/env bash

# https://stackoverflow.com/a/246128/6674256
root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# https://devhints.io/bash#miscellaneous
# put option-fetching before "set -o nounset" so that we can detect flags without arguments
while [[ "$1" =~ ^- ]]; do 
  case $1 in
    --output ) shift; [[ ! $1 =~ ^- ]] && output=$1;;
    --reference ) shift; [[ ! $1 =~ ^- ]] && reference=$1;;
    --repeats ) shift; [[ ! $1 =~ ^- ]] && repeats=$1;;
    --functional-regions ) shift; [[ ! $1 =~ ^- ]] && functional_regions=$1;;
    --min-repeat-length ) shift; [[ ! $1 =~ ^- ]] && min_repeat_length=$1;;
    --threads ) shift; [[ ! $1 =~ ^- ]] && number_threads=$1;;
    --svtype ) shift; [[ ! $1 =~ ^- ]] && svtype=$1;;
    --alignments ) shift; [[ ! $1 =~ ^- ]] && alignments=$1;;
    *) bash ${root}/utilities/error.sh "$0: $1 is an invalid flag"; exit 1;;
  esac 
  shift
done

min_repeat_length=${min_repeat_length:-"0"}
functional_regions=${functional_regions:-"none"}

set -o errexit
set -o pipefail
set -o nounset
# set -o noclobber

set -o xtrace
# Must use single quote to prevent variable expansion.
# For example, if double quotes were used, ${LINENO} would take on the value of the current line,
# instead of its value when PS4 is used later in the script
# https://stackoverflow.com/a/6697845/6674256
# ${FOO:+val}    val if $FOO is set
# ${FOO[0]}   element #0 of the FOO array
# https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html
PS4='+ (${BASH_SOURCE[0]##*/} @ ${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

if [[ ${svtype} != "DEL" ]]; then
  echo "Only discovery of SVs of type DEL are currently supported"
  exit 1
fi

# https://stackoverflow.com/a/43476575/6674256
export PYTHONPATH="${root}/utilities"

mkdir --parents ${output} 
rm --force ${output}/fermikit.*

# bash ${root}/make-regions/make-regions.sh \
#     --output ${output} \
#     --repeats ${repeats} \
#     --min-repeat-length ${min_repeat_length} \
#     --alignments ${alignments} \
#     --threads ${number_threads} \
#     --functional-regions ${functional_regions} \
#     --reference ${reference} \
#     --root ${root} \
#   2> ${output}/make-regions.log 

bash ${root}/make-calls/make-calls.sh \
    --output ${output} \
    --alignments ${alignments} \
    --threads ${number_threads} \
    --reference ${reference} \
    --root ${root} \
  > ${output}/make-calls.log 2>&1

bash ${root}/filter-calls/filter-calls.sh \
    --output ${output} \
    --svtype ${svtype} \
    --reference ${reference} \
    --threads ${number_threads} \
    --root ${root} 
#  2> ${output}/filter-calls.log 

